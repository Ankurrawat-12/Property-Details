{
    "functions": [
      {
        "name": "Agent Information Extraction",
        "code": "function extract_agents_info(property_item, agents_details) {\n  const filler_names = [\"please contact\", \"licence number\", \"accommodation tenancy\"];\n  try {\n    let index = -1;\n    for (const matches of agents_details) {\n      index += 1;\n      const text_suffix = index === 0 ? '' : String(index + 1);\n      if (index >= 3) return;\n      for (const group of matches) {\n        if (group.includes('@')) {\n          property_item[`agent_email${text_suffix}`] = group.trim();\n        } else if (/\\d/.test(group)) {\n          const clean_phone = group.trim().replace(/\\s+/g, '');\n          if (clean_phone.length > 8 && clean_phone.length < 13 && property_item[`agent_name${text_suffix}`] !== \"\") {\n            property_item[`agent_telephone${text_suffix}`] = clean_phone;\n          } else {\n            property_item[`agent_name${text_suffix}`] = \"\";\n            property_item[`agent_email${text_suffix}`] = \"\";\n            index -= 1;\n          }\n        } else if (group && !filler_names.includes(group.toLowerCase())) {\n          property_item[`agent_name${text_suffix}`] = group.trim();\n        }\n      }\n    }\n  } catch (error) {\n    console.error(\"Error extracting agent info:\", error);\n  }\n}"
      },
      {
        "name": "Lease Information Extraction",
        "code": "function property_lease(property_item, pdf_text) {\n  try {\n    const patterns = {\n      'lease': /\\blease\\b/i,\n      'year': /\\byear\\b/i,\n      'expire': /\\bexpir\\w*\\b/i,\n    };\n    const sections = pdf_text.split(/\\n{2,}/);\n    const matches = sections.filter(section => Object.values(patterns).some(pattern => pattern.test(section)));\n\n    property_item['lease_text_raw'] = matches.join(\"\\n\");\n  } catch (error) {\n    console.error(\"Error extracting lease text:\", error);\n  }\n}"
      }
    ],
    "regex": [
      {
        "name": "Rent Extraction",
        "pattern": "Rent[\\s\\w]*?(Â£[\\d,]+(?:\\.\\d{2})?)"
      },
      {
        "name": "Postcode Extraction",
        "pattern": "[A-Z]{1,2}\\d[A-Z\\d]? \\d[A-Z]{2}"
      },
      {
        "name": "Agent Details",
        "pattern": "(?:uk|com)?[\\s\\n]*?(?:E|E\\:|Email\\:)?[\\s\\n]*?([a-zA-Z\\d\\.]+@[a-zA-Z\\d]+\\.(?:[a-z\\.]|com|co\\.uk)+)?[\\s\\n]*?([a-zA-Z]+\\s+[a-zA-Z]+)[\\s\\n]*(?:\\:)?[\\s\\n]*?(?:E|E\\:|Email\\:)?[\\s\\n]*?([a-zA-Z\\d\\.]+@[a-zA-Z\\d]+\\.(?:[a-z\\.]|com|co\\.uk)+)?[\\s\\n]*?(?:T|T\\:|Tel\\:)?\\s*\n*(\\d{2,7}\\s{0,2}?\\d{2,7}?\\s{0,2}?\\d{2,7}\\s{0,2}?)(?:M|M\\:|M\\.)?\\s*\\n*(\\d{2,7}\\s{0,2}?\\d{2,7}?\\s{0,2}?\\d{2,7}\\s{0,2}?)?[\\s\\n]*(?:E|E\\:|Email\\:)?[\\s\\n]*?([a-zA-Z\\d\\.]+@[a-zA-Z\\d]+\\.(?:[a-z\\.]|com|co\\.uk)+)?"
      }
    ],
    "xpaths": [
      {
        "name": "Property Title XPath",
        "expression": "//h1[@class='property-title']"
      },
      {
        "name": "Agent Email XPath",
        "expression": "//span[@class='agent-email']/text()"
      }
    ]
  }
  